# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
enhanced_data_processor: An enhanced agent that processes data with external libraries
Generated by ADK Agent Generator
"""

from datetime import datetime
from google.adk.agents.llm_agent import LlmAgent
from google.adk.agents.loop_agent import LoopAgent
from google.adk.agents.parallel_agent import ParallelAgent
from google.adk.agents.sequential_agent import SequentialAgent
from google.adk.tools.function_tool import FunctionTool
from google.genai import types
from typing import List, Dict, Any, Optional
from typing import Optional
import json
import pandas as pd
import requests


# Tool: Fetch data from a URL using requests
def fetch_data(url: str) -> str:
    """Fetch data from a URL."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return json.dumps(response.json(), indent=2)
    except Exception as e:
        return f"Error fetching data: {str(e)}"

# Tool: Analyze data using pandas
def analyze_data(data_json: str) -> str:
    """Analyze JSON data using pandas."""
    try:
        data = json.loads(data_json)
        df = pd.DataFrame(data)
        
        analysis = {
            "shape": df.shape,
            "columns": list(df.columns),
            "dtypes": df.dtypes.to_dict(),
            "summary": df.describe().to_dict() if df.select_dtypes(include='number').shape[1] > 0 else "No numeric columns"
        }
        
        return json.dumps(analysis, indent=2, default=str)
    except Exception as e:
        return f"Error analyzing data: {str(e)}"

# Tool: Export results to CSV using pandas
def export_results(data_json: str, filename: Optional[str] = None) -> str:
    """Export data to CSV file."""
    try:
        data = json.loads(data_json)
        df = pd.DataFrame(data)
        
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"export_{timestamp}.csv"
        
        df.to_csv(filename, index=False)
        return f"Data exported to {filename} successfully. Shape: {df.shape}"
    except Exception as e:
        return f"Error exporting data: {str(e)}"


# Processes data using pandas and requests
data_processor = LlmAgent(
    name="data_processor",
    model="gemini-2.0-flash-lite-001",
    description="""
    Processes data using pandas and requests
    """,
    instruction="""
    You are a data processing assistant. Use the available tools to fetch and analyze data.
    """,
    tools=[FunctionTool(fetch_data), FunctionTool(analyze_data), FunctionTool(export_results)]
)


# Main agent (entry point)
root_agent = data_processor
